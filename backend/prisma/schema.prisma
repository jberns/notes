// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma migrate dev --name init
// prisma generate

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum NoteType {
  NOTE
  TASK
}

model Note {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  text       String?
  tag        String?
  type       NoteType @default(NOTE)
  author     User     @relation("Author", fields: [authorId], references: [id])
  authorId   Int
  assigned   User?    @relation("Assigned", fields: [assignedId], references: [id])
  assignedId Int
  complete   Boolean  @default(false)
  Block      Block[]
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   Note     @relation(fields: [noteId], references: [id])
  noteId    Int
}

model Page {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String?
  icon       String?
  blocks_ref String?
  project    Project? @relation(fields: [projectId], references: [id])
  projectId  Int?
}

model Project {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  icon      String?
  pages     Page[]
  team      User[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bio       String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}

model User {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  name          String?
  authorNotes   Note[]    @relation("Author")
  assignedNotes Note[]    @relation("Assigned")
  profile       Profile?
  projects      Project[] @relation(fields: [projectId], references: [id])
  projectId     Int?
}
